import pyautogui

# объявляем переменные:
name_X = None              # Ожидание ввода имени первого игрока.
name_0 = None              # Ожидание ввода имени второго игрока.
p1 = '\033[31mХ\033[0m'    # Игрок Х красный цвет
p2 = '\033[34mO\033[0m'    # Игрок O синий цвет


# Приветствие и правила игры.
def regulations():
    print()
    print('*' * 10, '\033[32m  Крестики - Нолики  \033[0m', '*' * 10)       # добавим немного красок )
    print('         Добро пожаловать друзья !')
    print()

    decision = input('Хотите прочитать правила?: ').lower()
    while decision != 'да' and decision != 'нет':                           # Проверка на корректность ответа.
        print('Введите корректный ответ ДА или НЕТ')
        decision = input('Хотите прочитать правила?: ').lower()
    if decision == 'да':
        res = pyautogui.confirm(text='* Игроки по очереди делают ход на свободные клетки поля.\n'
                                     '* Задача первым выставить 3 свои фишки по вертикали, горизонтали или диагонали.\n'
                                     '* Первый ход делает игрок, расставляющий крестик.\n'
                                     '* Для хода, необходимо ввести координаты поля, X и Y\n'
                                     '** 1 вводим X - это строка,\n'
                                     '** 2 вводим Y - это столбец,\n',
                                title='Правила игры «Крестики-нолики»',
                                buttons=['Начнем игру', 'В другой раз'])      # Вызов модального окна
        if res == 'В другой раз':
            print()
            print('Очень жаль, что вы передумали.\n''До новых встреч.')
            exit()
    elif decision == 'нет':
        print('Тогда начнем!')
        print()


# Знакомство с игроками:
def greet():
    global name_X, name_0
    print('*' * 43)
    print()
    name_X = input('Введите имя игрока 1: ')
    print(f'{name_X}, ты крестик {p1}')
    print()
    name_0 = input('Введите имя игрока 2: ')
    print(f'{name_0}, ты нолик {p2}')
    print()
    print('*' * 43)


# Игровое поле_def show():
def show():
    print()
    print('  | 0 | 1 | 2 | ')
    print('---------------- ')
    for i, row in enumerate(field):
        row_str = f'{i} | {" | ".join(row)} | '
        print(row_str)
        print('---------------- ')
    print()


#  Запрос координат
def ask():
    while True:  # бесконечный цикл, условие для выхода: пока не получим корректные координаты
        cords = input('Ваш ход: ').split()

        if len(cords) != 2:
            print('Введите 2 координаты! ')
            continue

        x, y = cords

        if not (x.isdigit()) or not (y.isdigit()):
            print('Введите числа! ')
            continue

        x, y = int(x), int(y)

        if 0 > x or x > 2 or 0 > y or y > 2:
            print('Координаты вне диапазона! ')
            continue

        if field[x][y] != ' ':
            print('Клетка занята! ')
            continue
        return x, y


# Проверка выигрышных комбинаций
def check_win():
    win_cord = [((0, 0), (0, 1), (0, 2)), ((1, 0), (1, 1), (1, 2)), ((2, 0), (2, 1), (2, 2)),  # выигрышные строки
                ((0, 0), (1, 0), (2, 0)), ((0, 1), (1, 1), (2, 1)), ((0, 2), (1, 2), (2, 2)),  # выигрышные столбцы
                ((0, 0), (1, 1), (2, 2)), ((2, 0), (1, 1), (0, 2))]  # выигрышные диагонали
    for cord in win_cord:  # пройдемся по списку выигрышных комбинаций win_cord
        symbols = []
        for c in cord:  # пройдемся по списку каждой комбинации cord и сравним содержимое в каждой комбинации её точки
            symbols.append(field[c[0]][c[1]])  # добавим каждую комбинацию с её точками в новый список
            if symbols == [p1, p1, p1]:  # Если новый список состоит из трех X, то он победил
                print()
                print(f'Выиграл {p1}, Поздравляем {name_X} !!!')
                return True
            if symbols == [p2, p2, p2]:  # Если новый список состоит из трех 0, то он победил
                print()
                print(f'Выиграл {p2}, Поздравляем {name_0} !!!')
                return True
    return False


regulations()
greet()
field = [[' '] * 3 for i in range(3)]  # созданное поле
num = 0  # подсчет ходов, нечетное = ходит Х, четное = ходит 0
while True:  # бесконечный цикл, условие для выхода: пока не случится выигрыш или ничья (9 ходов)
    num += 1
    show()

    if num % 2 == 1:  # проверяем чей ход
        print('Ходит', name_X)
        move = p1  # если ходит крестик, то появляется X
    else:
        print('Ходит', name_0)
        move = p2  # если ходит нолик, то появляется 0

    x, y = ask()  # после проверки хода, запрашиваем координаты, через функцию ask()
    field[x][y] = move

    if check_win():  # обращение к функции проверки на выигрыш
        field[x][y] = move
        show()
        print('Приз победителю !!!')
        print('\u2603')
        break  # если случился выигрыш, завершаем игру

    if num == 9:  # проверка на НИЧЬЮ, если до 9 шагов ни кто не выиграл
        field[x][y] = move
        show()
        print('Ничья')
        break  # Выход из цикла т.к. достигли максимального количества ходов
